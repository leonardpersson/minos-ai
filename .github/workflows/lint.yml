name: Lint

on:
  push:
    branches: [main, develop]
    paths:
      - '**.ts'
      - '**.tsx'
      - '**.js'
      - '**.jsx'
      - '**.rs'
      - '**.toml'
      - '.eslintrc.js'
      - '.prettierrc'
      - '**/Cargo.toml'
      - '.github/workflows/lint.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - '**.ts'
      - '**.tsx'
      - '**.js'
      - '**.jsx'
      - '**.rs'
      - '**.toml'
      - '.eslintrc.js'
      - '.prettierrc'
      - '**/Cargo.toml'
      - '.github/workflows/lint.yml'
  workflow_dispatch:

jobs:
  js-lint:
    name: JavaScript/TypeScript Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Cache dependencies
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      
      - name: Install dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Check formatting
        run: npm run format:check
      
      - name: Lint code
        run: npm run lint
      
      - name: Check for circular dependencies
        run: |
          npx madge --circular --extensions ts ./sdk/src
          npx madge --circular --extensions ts ./packages/backend/src
          npx madge --circular --extensions ts ./packages/indexer/src
      
      - name: Check TypeScript compilation
        run: npm run ts:check
  
  rust-lint:
    name: Rust Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            packages/contracts/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run cargo fmt
        working-directory: packages/contracts
        run: cargo fmt --all -- --check
      
      - name: Run cargo clippy
        working-directory: packages/contracts
        run: cargo clippy --all-targets -- -D warnings
      
      - name: Analyze Rust code
        working-directory: packages/contracts
        run: |
          cargo install cargo-audit || true
          cargo audit
  
  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install yamllint
        run: pip install yamllint
      
      - name: Lint YAML files
        run: yamllint -c .yamllint.yml .
  
  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      
      - name: Install markdownlint
        run: npm install -g markdownlint-cli
      
      - name: Lint Markdown files
        run: markdownlint "**/*.md" --ignore node_modules --ignore "**/CHANGELOG.md"
  
  prettier-check:
    name: Prettier Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check formatting with Prettier
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md,yml,yaml}"
  
  codeql-analyze:
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
  
  lint-summary:
    name: Lint Summary
    needs: [js-lint, rust-lint, yaml-lint, markdown-lint, prettier-check, codeql-analyze]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.js-lint.result }}" == "success" && \
                "${{ needs.rust-lint.result }}" == "success" && \
                "${{ needs.yaml-lint.result }}" == "success" && \
                "${{ needs.markdown-lint.result }}" == "success" && \
                "${{ needs.prettier-check.result }}" == "success" && \
                "${{ needs.codeql-analyze.result }}" == "success" ]]; then
            echo "All linting passed!"
            exit 0
          else
            echo "Some linting checks failed!"
            exit 1
          fi