# Multi-stage Dockerfile for Backend Service (Development)
# Enterprise-level configuration with hot-reloading, debugging, and dev tooling

# =====================================
# Base Node.js Image with Security
# =====================================
FROM node:20-alpine AS base

# Install system dependencies with security updates
RUN apk update && apk upgrade && apk add --no-cache \
    dumb-init \
    curl \
    bash \
    git \
    openssh-client \
    python3 \
    make \
    g++ \
    libc6-compat \
    ca-certificates \
    tzdata \
    netcat-openbsd \
    jq \
    && rm -rf /var/cache/apk/* \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nodejs -u 1001 -G nodejs -h /home/nodejs

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create app directory with proper permissions
WORKDIR /app
RUN chown nodejs:nodejs /app

# =====================================
# Dependencies Installation
# =====================================
FROM base AS dependencies

USER nodejs

# Copy package files with proper ownership
COPY --chown=nodejs:nodejs package*.json ./
COPY --chown=nodejs:nodejs yarn.lock* ./
COPY --chown=nodejs:nodejs pnpm-lock.yaml* ./

# Install package manager
RUN npm install -g pnpm@8.11.0

# Configure npm with enterprise settings
RUN pnpm config set store-dir /home/nodejs/.pnpm-store \
    && pnpm config set cache-dir /home/nodejs/.pnpm-cache \
    && pnpm config set state-dir /home/nodejs/.pnpm-state \
    && pnpm config set registry https://registry.npmjs.org/ \
    && pnpm config set fetch-timeout 300000 \
    && pnpm config set fetch-retries 5 \
    && pnpm config set fetch-retry-maxtimeout 60000

# Install dependencies with cache mounting
RUN --mount=type=cache,target=/home/nodejs/.pnpm-store,uid=1001,gid=1001 \
    --mount=type=cache,target=/home/nodejs/.pnpm-cache,uid=1001,gid=1001 \
    pnpm install --frozen-lockfile --prefer-offline

# =====================================
# Development Environment
# =====================================
FROM dependencies AS development

# Install development dependencies
RUN --mount=type=cache,target=/home/nodejs/.pnpm-store,uid=1001,gid=1001 \
    pnpm install --dev --frozen-lockfile --prefer-offline

# Install global development tools
RUN pnpm add -g \
    nodemon@3.0.2 \
    tsx@4.6.2 \
    ts-node@10.9.2 \
    typescript@5.3.3 \
    @types/node@20.10.5 \
    rimraf@5.0.5

# Copy source code with proper ownership
COPY --chown=nodejs:nodejs . .

# Create development directories
RUN mkdir -p \
    /app/logs/{app,access,error,debug} \
    /app/uploads \
    /app/temp \
    /app/cache/{redis,file} \
    /app/dist \
    /app/.vscode \
    && chown -R nodejs:nodejs /app/logs /app/uploads /app/temp /app/cache /app/dist /app/.vscode

# Set up TypeScript configuration for development
RUN cat > /app/tsconfig.dev.json << 'EOF'
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "sourceMap": true,
    "inlineSourceMap": false,
    "incremental": true,
    "tsBuildInfoFile": ".tsbuildinfo",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "preserveWatchOutput": true
  },
  "watchOptions": {
    "watchFile": "useFsEvents",
    "watchDirectory": "useFsEvents",
    "fallbackPolling": "dynamicPriority",
    "synchronousWatchDirectory": true,
    "excludeDirectories": [
      "node_modules",
      "dist",
      "logs",
      "temp",
      "cache"
    ]
  }
}
EOF

# Create comprehensive start script
RUN cat > /app/start-dev.sh << 'EOF'
#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Show banner
echo -e "${GREEN}"
cat << 'BANNER'
 ╔╦╗┬┌┐┌┌─┐┌─┐  ╔═╗╦
 ║║║││││├─┤└─┐  ╠═╣║
 ╩ ╩┴┘└┘┴ ┴└─┘  ╩ ╩╩
 Development Environment
BANNER
echo -e "${NC}"

# Set environment variables
export NODE_ENV=${NODE_ENV:-development}
export DEBUG=${DEBUG:-'*'}
export LOG_LEVEL=${LOG_LEVEL:-debug}
export PORT=${PORT:-3000}
export DEBUG_PORT=${DEBUG_PORT:-9229}

# Function to check dependency
check_dependency() {
    local host=$1
    local port=$2
    local service=$3
    
    echo -e "${YELLOW}⏳ Checking $service connection at $host:$port...${NC}"
    while ! nc -z $host $port; do
        echo -e "${BLUE}⏳ Waiting for $service...${NC}"
        sleep 2
    done
    echo -e "${GREEN}✅ $service is ready!${NC}"
}

# Wait for dependencies
check_dependency postgres 5432 "PostgreSQL"
check_dependency redis 6379 "Redis"

# Check for Solana validator if required
if [ "${SOLANA_RPC_URL}" ]; then
    echo -e "${YELLOW}⏳ Checking Solana validator...${NC}"
    until curl -s ${SOLANA_RPC_URL}/health | grep -q "ok"; do
        echo -e "${BLUE}⏳ Waiting for Solana validator...${NC}"
        sleep 3
    done
    echo -e "${GREEN}✅ Solana validator is ready!${NC}"
fi

# Run initial setup scripts
if [ -f /app/scripts/setup-dev.ts ]; then
    echo -e "${PURPLE}🔧 Running development setup...${NC}"
    tsx /app/scripts/setup-dev.ts || echo -e "${RED}⚠️  Setup script failed${NC}"
fi

# Run database migrations
if [ -f /app/scripts/migrate.ts ]; then
    echo -e "${PURPLE}🔧 Running database migrations...${NC}"
    tsx /app/scripts/migrate.ts || echo -e "${RED}⚠️  Migrations failed${NC}"
fi

# Run database seeding for development
if [ -f /app/scripts/seed-dev.ts ]; then
    echo -e "${PURPLE}🌱 Seeding development data...${NC}"
    tsx /app/scripts/seed-dev.ts || echo -e "${RED}⚠️  Seeding failed${NC}"
fi

# Create log files with proper structure
touch /app/logs/app/app.log
touch /app/logs/access/access.log
touch /app/logs/error/error.log
touch /app/logs/debug/debug.log

# Set up file watchers for configuration changes
if command -v inotifywait &> /dev/null; then
    (
        echo -e "${CYAN}👀 Setting up config file watchers...${NC}"
        inotifywait -m -e modify /app/config/ | while read path action file; do
            echo -e "${YELLOW}⚡ Config file changed: $file${NC}"
            echo -e "${GREEN}🔄 Restarting application...${NC}"
            killall -USR2 node || true
        done
    ) &
fi

# Start the application with development features
echo -e "${GREEN}🚀 Starting Minos Backend in development mode...${NC}"
echo -e "${BLUE}📝 Logs available at:${NC}"
echo -e "  - Application: /app/logs/app/app.log"
echo -e "  - Access: /app/logs/access/access.log"
echo -e "  - Errors: /app/logs/error/error.log"
echo -e "  - Debug: /app/logs/debug/debug.log"

if [ "${ENABLE_DEBUGGER}" = "true" ]; then
    echo -e "${PURPLE}🐛 Debug port: $DEBUG_PORT${NC}"
    exec nodemon \
        --exec "node --inspect=0.0.0.0:$DEBUG_PORT --max-old-space-size=4096 -r ts-node/register/transpile-only" \
        --ext ts,js,json,env \
        --ignore node_modules/ \
        --ignore dist/ \
        --ignore logs/ \
        --ignore cache/ \
        --ignore temp/ \
        --watch src/ \
        --watch config/ \
        --verbose \
        src/index.ts
else
    exec nodemon \
        --exec "tsx --tsconfig tsconfig.dev.json" \
        --ext ts,js,json,env \
        --ignore node_modules/ \
        --ignore dist/ \
        --ignore logs/ \
        --ignore cache/ \
        --ignore temp/ \
        --watch src/ \
        --watch config/ \
        --verbose \
        src/index.ts
fi
EOF

chmod +x /app/start-dev.sh

# Create enhanced health check script
RUN cat > /app/healthcheck.sh << 'EOF'
#!/bin/bash
set -e

# Check main service health endpoint
if ! curl -f --max-time 10 --connect-timeout 5 http://localhost:${PORT:-3000}/health 2>/dev/null; then
    echo "❌ Service health check failed"
    exit 1
fi

# Check database connection
if ! curl -f --max-time 5 http://localhost:${PORT:-3000}/health/db 2>/dev/null; then
    echo "⚠️  Database health check failed"
    exit 1
fi

# Check Redis connection
if ! curl -f --max-time 5 http://localhost:${PORT:-3000}/health/redis 2>/dev/null; then
    echo "⚠️  Redis health check failed"
    exit 1
fi

# Check disk space
if [ $(df /app | tail -1 | awk '{print $5}' | sed 's/%//') -gt 85 ]; then
    echo "⚠️  Disk space warning: $(df -h /app | tail -1 | awk '{print $5}') used"
fi

# Check memory usage
if [ $(ps aux | awk '{sum+=$6} END {print int(sum/1024)}') -gt 1024 ]; then
    echo "⚠️  High memory usage detected"
fi

echo "✅ All health checks passed"
exit 0
EOF

chmod +x /app/healthcheck.sh

# Create development utilities script
RUN cat > /app/dev-utils.sh << 'EOF'
#!/bin/bash
set -e

case "$1" in
    "logs")
        if [ "$2" ]; then
            tail -f /app/logs/*/$2*.log
        else
            tail -f /app/logs/*/*.log
        fi
        ;;
    "logs:app")
        tail -f /app/logs/app/app.log
        ;;
    "logs:access")
        tail -f /app/logs/access/access.log
        ;;
    "logs:error")
        tail -f /app/logs/error/error.log
        ;;
    "logs:debug")
        tail -f /app/logs/debug/debug.log
        ;;
    "status")
        echo "🔍 Service Status:"
        echo "  - Health: $(curl -s http://localhost:3000/health | jq -r .status || echo 'DOWN')"
        echo "  - Database: $(curl -s http://localhost:3000/health/db | jq -r .status || echo 'DOWN')"
        echo "  - Redis: $(curl -s http://localhost:3000/health/redis | jq -r .status || echo 'DOWN')"
        echo "  - Memory: $(free -h | awk 'NR==2{printf "%.1f/%.1f GB", $3/1024/1024, $2/1024/1024}')"
        echo "  - CPU: $(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}')"
        ;;
    "reset-db")
        echo "🗑️  Resetting database..."
        tsx /app/scripts/reset-db.ts
        ;;
    "seed-db")
        echo "🌱 Seeding database..."
        tsx /app/scripts/seed-dev.ts
        ;;
    "migrate")
        echo "🔄 Running migrations..."
        tsx /app/scripts/migrate.ts
        ;;
    "generate-types")
        echo "🏗️  Generating types..."
        tsx /app/scripts/generate-types.ts
        ;;
    "test")
        echo "🧪 Running tests..."
        pnpm test
        ;;
    "test:watch")
        echo "👀 Running tests in watch mode..."
        pnpm test:watch
        ;;
    "test:coverage")
        echo "📊 Running tests with coverage..."
        pnpm test:coverage
        ;;
    "lint")
        echo "🔍 Linting code..."
        pnpm lint
        ;;
    "lint:fix")
        echo "🔧 Fixing lint issues..."
        pnpm lint:fix
        ;;
    "type-check")
        echo "🔍 Type checking..."
        tsc --noEmit
        ;;
    "build")
        echo "🏗️  Building application..."
        pnpm build:dev
        ;;
    "shell")
        echo "🐚 Opening shell in app directory..."
        cd /app && exec bash
        ;;
    "env")
        echo "🌍 Environment variables:"
        env | grep -E '^(NODE_|POSTGRES_|REDIS_|JWT_|CORS_|LOG_|DEBUG|PORT)' | sort
        ;;
    *)
        echo "🛠️  Available commands:"
        echo "  logs [filter]     - View logs (all or filtered)"
        echo "  logs:app          - View application logs"
        echo "  logs:access       - View access logs"
        echo "  logs:error        - View error logs"
        echo "  logs:debug        - View debug logs"
        echo "  status            - Show service status"
        echo "  reset-db          - Reset database"
        echo "  seed-db           - Seed database with test data"
        echo "  migrate           - Run database migrations"
        echo "  generate-types    - Generate TypeScript types"
        echo "  test              - Run tests"
        echo "  test:watch        - Run tests in watch mode"
        echo "  test:coverage     - Run tests with coverage"
        echo "  lint              - Lint code"
        echo "  lint:fix          - Fix lint issues"
        echo "  type-check        - Check TypeScript types"
        echo "  build             - Build application"
        echo "  shell             - Open shell"
        echo "  env               - Show environment variables"
        ;;
esac
EOF

chmod +x /app/dev-utils.sh

# Set up nodemon configuration
RUN cat > /app/nodemon.json << 'EOF'
{
  "watch": ["src", "config"],
  "ext": "ts,js,json,env",
  "ignore": [
    "node_modules",
    "dist",
    "logs",
    "cache",
    "temp",
    "uploads",
    "*.log",
    "*.cache",
    ".git"
  ],
  "exec": "tsx src/index.ts",
  "env": {
    "NODE_ENV": "development",
    "LOG_LEVEL": "debug"
  },
  "delay": "1000",
  "verbose": true,
  "restartable": "rs",
  "colours": true,
  "legacyWatch": false,
  "signal": "SIGTERM",
  "stdout": true,
  "stderr": true,
  "events": {
    "start": "echo '🚀 Starting application...'",
    "crash": "echo '💥 Application crashed!'",
    "exit": "echo '👋 Application exited'",
    "restart": "echo '🔄 Restarting application...'",
    "config:update": "echo '⚙️  Config updated'"
  }
}
EOF

# Set up VS Code debugging configuration
RUN mkdir -p /app/.vscode && cat > /app/.vscode/launch.json << 'EOF'
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Backend",
      "type": "node",
      "request": "attach",
      "port": 9229,
      "address": "localhost",
      "localRoot": "${workspaceFolder}",
      "remoteRoot": "/app",
      "skipFiles": ["<node_internals>/**", "**/node_modules/**"],
      "restart": true,
      "console": "integratedTerminal",
      "sourceMaps": true,
      "outFiles": ["${workspaceFolder}/dist/**/*.js"]
    }
  ]
}
EOF

# Install additional development tools
RUN pnpm add -D \
    @types/express \
    @types/joi \
    @types/cors \
    @types/helmet \
    @typescript-eslint/parser \
    @typescript-eslint/eslint-plugin \
    eslint-plugin-import \
    eslint-plugin-node \
    eslint-plugin-promise \
    eslint-plugin-security \
    husky \
    lint-staged \
    prettier \
    @types/jest \
    jest \
    supertest \
    @types/supertest

# Set up ESLint configuration
RUN cat > /app/.eslintrc.dev.js << 'EOF'
module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 2022,
    sourceType: 'module',
    project: './tsconfig.dev.json',
  },
  plugins: ['@typescript-eslint', 'import', 'node', 'promise', 'security'],
  extends: [
    'eslint:recommended',
    '@typescript-eslint/recommended',
    'plugin:import/typescript',
    'plugin:node/recommended',
    'plugin:promise/recommended',
    'plugin:security/recommended',
  ],
  rules: {
    // Development-specific rules
    '@typescript-eslint/no-console': 'off',
    '@typescript-eslint/no-debugger': 'off',
    '@typescript-eslint/no-unused-vars': 'warn',
    'no-console': 'off',
    'no-debugger': 'off',
  },
  env: {
    node: true,
    es2022: true,
    jest: true,
  },
};
EOF

# Set up Prettier configuration
RUN cat > /app/.prettierrc.dev.json << 'EOF'
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "endOfLine": "lf",
  "arrowParens": "avoid",
  "bracketSpacing": true,
  "bracketSameLine": false,
  "proseWrap": "preserve"
}
EOF

# Set development environment variables
ENV NODE_ENV=development
ENV LOG_LEVEL=debug
ENV ENABLE_SOURCE_MAPS=true
ENV ENABLE_DEBUG_LOGS=true
ENV DEBUG_PORT=9229
ENV ENABLE_DEBUGGER=false

# Expose ports
EXPOSE 3000 9229

# Set default command
CMD ["./start-dev.sh"]

# Add comprehensive labels
LABEL maintainer="Minos AI Team <dev@minos.ai>"
LABEL version="1.0.0"
LABEL description="Minos AI Backend Service - Development Environment"
LABEL environment="development"
LABEL service="backend"
LABEL created-date="2024-02-15"

# Health check with extended timeout
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
  CMD ["./healthcheck.sh"]