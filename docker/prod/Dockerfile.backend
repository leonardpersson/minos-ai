# Multi-stage Dockerfile for Backend Service (Production)
# Optimized for performance, security, and minimal footprint

# =====================================
# Base Image with Security Hardening
# =====================================
FROM node:20-alpine AS base

# Install essential system dependencies
RUN apk update && apk upgrade && apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata \
    && rm -rf /var/cache/apk/* \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nodejs -u 1001 -G nodejs -h /home/nodejs

# Set timezone and locale
ENV TZ=UTC \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create app directory with proper permissions
WORKDIR /app
RUN chown nodejs:nodejs /app

# =====================================
# Dependencies Stage
# =====================================
FROM base AS dependencies

USER nodejs

# Copy package files
COPY --chown=nodejs:nodejs package*.json ./
COPY --chown=nodejs:nodejs pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm@8.11.0

# Configure npm registry
RUN pnpm config set registry https://registry.npmjs.org/ \
    && pnpm config set store-dir /home/nodejs/.pnpm-store \
    && pnpm config set cache-dir /home/nodejs/.pnpm-cache

# Install dependencies
RUN --mount=type=cache,target=/home/nodejs/.pnpm-store,uid=1001,gid=1001 \
    pnpm install --prod --frozen-lockfile --prefer-offline

# =====================================
# Build Stage
# =====================================
FROM base AS builder

USER nodejs

# Copy source code and package files
COPY --chown=nodejs:nodejs package*.json ./
COPY --chown=nodejs:nodejs pnpm-lock.yaml ./
COPY --chown=nodejs:nodejs tsconfig.json ./
COPY --chown=nodejs:nodejs src ./src

# Install build dependencies
RUN npm install -g pnpm@8.11.0

# Install all dependencies including dev deps
RUN --mount=type=cache,target=/home/nodejs/.pnpm-store,uid=1001,gid=1001 \
    pnpm install --frozen-lockfile --prefer-offline

# Build application
ENV NODE_ENV=production
RUN pnpm run build

# Prune development dependencies
RUN pnpm prune --prod --config.ignore-scripts=true

# =====================================
# Production Runtime Stage
# =====================================
FROM base AS production

USER nodejs

# Set production environment
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=2048 --optimize-for-size --no-deprecation" \
    NPM_CONFIG_LOGLEVEL=warn \
    PORT=3000

# Create necessary directories
RUN mkdir -p \
    /app/logs \
    /app/temp \
    /app/cache \
    /app/uploads \
    && chown -R nodejs:nodejs /app/logs /app/temp /app/cache /app/uploads

# Copy built application and dependencies
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package.json ./package.json

# Create production entrypoint script
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/sh
set -e

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${GREEN}🚀 Starting Minos Backend (Production)${NC}"

# Environment validation
if [ -z "$DATABASE_URL" ]; then
    echo -e "${RED}❌ ERROR: DATABASE_URL is required${NC}"
    exit 1
fi

if [ -z "$REDIS_URL" ]; then
    echo -e "${RED}❌ ERROR: REDIS_URL is required${NC}"
    exit 1
fi

if [ -z "$JWT_SECRET" ]; then
    echo -e "${RED}❌ ERROR: JWT_SECRET is required${NC}"
    exit 1
fi

# Wait for dependencies with timeout
wait_for_service() {
    local host=$1
    local port=$2
    local service=$3
    local timeout=${4:-60}
    
    echo -e "${YELLOW}⏳ Waiting for $service at $host:$port...${NC}"
    
    for i in $(seq 1 $timeout); do
        if nc -z "$host" "$port" 2>/dev/null; then
            echo -e "${GREEN}✅ $service is ready${NC}"
            return 0
        fi
        sleep 1
    done
    
    echo -e "${RED}❌ Timeout waiting for $service${NC}"
    return 1
}

# Extract host and port from URLs
DB_HOST=$(echo $DATABASE_URL | sed -n 's|.*://[^@]*@\([^:]*\):\([0-9]*\)/.*|\1|p')
DB_PORT=$(echo $DATABASE_URL | sed -n 's|.*://[^@]*@[^:]*:\([0-9]*\)/.*|\1|p')
REDIS_HOST=$(echo $REDIS_URL | sed -n 's|.*://\([^:]*\):\([0-9]*\).*|\1|p')
REDIS_PORT=$(echo $REDIS_URL | sed -n 's|.*://[^:]*:\([0-9]*\).*|\1|p')

# Wait for services
wait_for_service "$DB_HOST" "$DB_PORT" "PostgreSQL" 60
wait_for_service "$REDIS_HOST" "$REDIS_PORT" "Redis" 30

# Run database migrations if needed
if [ "${RUN_MIGRATIONS:-true}" = "true" ] && [ -f "/app/scripts/migrate.js" ]; then
    echo -e "${YELLOW}🔄 Running database migrations...${NC}"
    node /app/scripts/migrate.js || {
        echo -e "${RED}❌ Migration failed${NC}"
        exit 1
    }
fi

# Set up graceful shutdown
_term() {
    echo -e "${YELLOW}🛑 Received SIGTERM, initiating graceful shutdown...${NC}"
    kill -TERM "$child" 2>/dev/null
    wait "$child"
    echo -e "${GREEN}✅ Graceful shutdown complete${NC}"
}

trap _term SIGTERM

# Start the application
echo -e "${GREEN}🚀 Starting application on port $PORT${NC}"
node dist/index.js &
child=$!
wait "$child"
EOF

chmod +x /app/entrypoint.sh

# Create health check script
RUN cat > /app/healthcheck.sh << 'EOF'
#!/bin/sh
set -e

# Check main health endpoint
if ! curl -f --max-time 10 --connect-timeout 5 \
    http://localhost:${PORT:-3000}/health 2>/dev/null; then
    exit 1
fi

# Check critical endpoints
if ! curl -f --max-time 5 \
    http://localhost:${PORT:-3000}/health/db 2>/dev/null; then
    exit 1
fi

if ! curl -f --max-time 5 \
    http://localhost:${PORT:-3000}/health/redis 2>/dev/null; then
    exit 1
fi

# Check memory usage
MEMORY_USAGE=$(ps -o %mem= -p 1 | awk '{print int($1)}')
if [ $MEMORY_USAGE -gt 90 ]; then
    echo "High memory usage: ${MEMORY_USAGE}%"
    exit 1
fi

exit 0
EOF

chmod +x /app/healthcheck.sh

# Create log rotation script
RUN cat > /app/rotate-logs.sh << 'EOF'
#!/bin/sh
set -e

LOG_DIR="/app/logs"
MAX_SIZE="100M"
MAX_FILES=5

for log_file in $(find $LOG_DIR -name "*.log" -type f); do
    if [ -f "$log_file" ] && [ $(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file") -gt 104857600 ]; then
        for i in $(seq $((MAX_FILES-1)) -1 1); do
            if [ -f "${log_file}.$i" ]; then
                mv "${log_file}.$i" "${log_file}.$((i+1))"
            fi
        done
        mv "$log_file" "${log_file}.1"
        touch "$log_file"
        chmod 644 "$log_file"
    fi
done
EOF

chmod +x /app/rotate-logs.sh

# Set up cron for log rotation
RUN echo "0 * * * * /app/rotate-logs.sh" | crontab -

# Security hardening
RUN chown -R nodejs:nodejs /app \
    && chmod -R 755 /app \
    && chmod -R 644 /app/dist \
    && chmod +x /app/entrypoint.sh /app/healthcheck.sh /app/rotate-logs.sh

# Expose application port
EXPOSE 3000

# Add labels for container management
LABEL maintainer="Minos AI Team <ops@minos.ai>" \
      version="1.0.0" \
      description="Minos AI Backend Service - Production" \
      environment="production" \
      service="backend" \
      build-date="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

# Health check with production settings
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD ["./healthcheck.sh"]

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["./entrypoint.sh"]