{
    "compilerOptions": {
      /* Base Options */
      "target": "es2020",                          /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
      "module": "esnext",                          /* Specify what module code is generated. */
      "lib": ["es2020", "dom", "dom.iterable"],    /* Specify a set of bundled library declaration files that describe the target runtime environment. */
      "jsx": "react-jsx",                          /* Specify what JSX code is generated. */
      "experimentalDecorators": true,              /* Enable experimental support for TC39 stage 2 draft decorators. */
      "emitDecoratorMetadata": true,               /* Emit design-type metadata for decorated declarations in source files. */
      
      /* Strict Type-Checking Options */
      "strict": true,                              /* Enable all strict type-checking options. */
      "noImplicitAny": true,                       /* Enable error reporting for expressions and declarations with an implied 'any' type. */
      "strictNullChecks": true,                    /* When type checking, take into account 'null' and 'undefined'. */
      "strictFunctionTypes": true,                 /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
      "strictBindCallApply": true,                 /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
      "strictPropertyInitialization": true,        /* Check for class properties that are declared but not set in the constructor. */
      "noImplicitThis": true,                      /* Enable error reporting when 'this' is given the type 'any'. */
      "useUnknownInCatchVariables": true,          /* Default catch clause variables as 'unknown' instead of 'any'. */
      "alwaysStrict": true,                        /* Ensure 'use strict' is always emitted. */
      
      /* Module Resolution Options */
      "moduleResolution": "node",                  /* Specify how TypeScript looks up a file from a given module specifier. */
      "baseUrl": ".",                              /* Specify the base directory to resolve non-relative module names. */
      "paths": {                                   /* Specify a set of entries that re-map imports to additional lookup locations. */
        "@/*": ["src/*"],
        "@minos/*": ["packages/*/src"]
      },
      "rootDirs": ["src", "tests"],                /* Allow multiple folders to be treated as one when resolving modules. */
      "typeRoots": ["node_modules/@types"],        /* Specify multiple folders that act like './node_modules/@types'. */
      "types": ["node", "jest", "react"],          /* Specify type package names to be included without being referenced in a source file. */
      "allowSyntheticDefaultImports": true,        /* Allow 'import x from y' when a module doesn't have a default export. */
      "esModuleInterop": true,                     /* Emit additional JavaScript to ease support for importing CommonJS modules. */
      "preserveSymlinks": false,                   /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
      "allowUmdGlobalAccess": false,               /* Allow accessing UMD globals from modules. */
      
      /* Source Map Options */
      "sourceRoot": "",                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */
      "mapRoot": "",                               /* Specify the location where debugger should locate map files instead of generated locations. */
      "inlineSourceMap": false,                    /* Include sourcemap files inside the emitted JavaScript. */
      "inlineSources": false,                      /* Include source code in the sourcemaps inside the emitted JavaScript. */
      
      /* Emit Options */
      "declaration": true,                         /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
      "declarationMap": true,                      /* Create sourcemaps for d.ts files. */
      "emitDeclarationOnly": false,                /* Only output d.ts files and not JavaScript files. */
      "sourceMap": true,                           /* Create source map files for emitted JavaScript files. */
      "outDir": "./dist",                          /* Specify an output folder for all emitted files. */
      "removeComments": false,                     /* Disable emitting comments. */
      "noEmit": false,                             /* Disable emitting files from a compilation. */
      "importHelpers": true,                       /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
      "importsNotUsedAsValues": "remove",          /* Specify emit/checking behavior for imports that are only used for types. */
      "downlevelIteration": true,                  /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
      "newLine": "lf",                             /* Set the newline character for emitting files. */
      "noEmitHelpers": false,                      /* Disable generating custom helper functions like '__extends' in compiled output. */
      "noEmitOnError": true,                       /* Disable emitting files if any type checking errors are reported. */
      "preserveConstEnums": true,                  /* Disable erasing 'const enum' declarations in generated code. */
      "declarationDir": "./types",                 /* Specify the output directory for generated declaration files. */
      "preserveValueImports": false,               /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
      
      /* Interop Constraints */
      "isolatedModules": true,                     /* Ensure that each file can be safely transpiled without relying on other imports. */
      "allowJs": true,                             /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
      "checkJs": false,                            /* Enable error reporting in type-checked JavaScript files. */
      "forceConsistentCasingInFileNames": true,    /* Ensure that casing is correct in imports. */
      
      /* Type Checking */
      "noImplicitReturns": true,                   /* Enable error reporting for code paths that do not explicitly return in a function. */
      "noFallthroughCasesInSwitch": true,          /* Enable error reporting for fallthrough cases in switch statements. */
      "noUncheckedIndexedAccess": true,            /* Add 'undefined' to a type when accessed using an index. */
      "noImplicitOverride": true,                  /* Ensure overriding members in derived classes are marked with an override modifier. */
      "noPropertyAccessFromIndexSignature": true,  /* Enforces using indexed accessors for keys declared using an indexed type. */
      "allowUnusedLabels": false,                  /* Disable error reporting for unused labels. */
      "allowUnreachableCode": false,               /* Disable error reporting for unreachable code. */
      
      /* Completeness */
      "skipDefaultLibCheck": true,                 /* Skip type checking .d.ts files that are included with TypeScript. */
      "skipLibCheck": true                         /* Skip type checking all .d.ts files. */
    },
    "include": [
      "src/**/*.ts",
      "src/**/*.tsx",
      "tests/**/*.ts",
      "tests/**/*.tsx"
    ],
    "exclude": [
      "node_modules",
      "dist",
      "build",
      "coverage"
    ],
    "ts-node": {
      "compilerOptions": {
        "module": "commonjs"
      }
    },
    "references": [
      { "path": "./packages/core" },
      { "path": "./packages/contracts" },
      { "path": "./packages/client" },
      { "path": "./packages/api" }
    ]
  }